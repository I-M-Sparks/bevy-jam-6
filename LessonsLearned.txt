Logging:
The default logging Plugin, as part of the DefaultPlugin, uses a runtime filter
the default runtime filter uses log level INFO
The compile time filter does NOT override this
>> debug & trace logs did not show up even though the compile time filter was set to trace

solution:
-had to add "use bevy::log::*;" because LogPlugin was not part of prelude
-added the follwoing to App setup:
App::new()
+++
    .add_plugins(DefaultPlugins
        .set(LogPlugin {
            level: Level::TRACE,
            ..Default::default()
        }))
+++
>> now all debug & trace logs showed, including logs from the engine

new task: how to only log trace/debug from my game, not the engine
>> added a filter for everything that isn't my application to level error:
+++
.set(LogPlugin {
            filter: "error,bevy_jam_6=trace".to_string(),
            level: Level::TRACE,
            ..Default::default()
        }))
+++

========================================================================
getting mouse position at time of button press made more suspense
-> cursor_evr: EventReader<CursorMoved>, removed

the example I found wasn't quite up to date
A "Result" was returned, wrapping an option
-> need to unwrap the result with .ok(), and then the Option with .unwrap()
>> not checking for errors here for brevity's sake; I'll just assume it works

========================================================================
Sprites and transforms

Sprites by default anchor at the center (says so in Sprite.rs of engine)
it requires a transform -> what does that mean again...?
-> intuitive way to use this would be to give an entity a transform and manipulate that
>> raises the question how exactly a sprite-offset from it's parent would look like, but not relevant in my case (maybe child entity with it's own transform?)

========================================================================
Queries

conflicting queries cause the app to panic
in my case, querying all Pickables and the Signle Picked entity in the same system caused a crash
solution: added "Without<Picked" to the Query that queries all Pickables:
pickables: Query<(&mut Transform, &Sprite), (With<Pickable>, Without<Picked>)>,
    picked: Single<&mut Transform, With<Picked>>,

note that the With<..> and Without<..> are part of a tuple, not a 3rd argument to the query (Query only accepts two arguments)

========================================================================

Sprite size

accessing the actual size of asprite is a bit tricky; it's necessary to get the image size through the Image-Assets-Ressource, and multiply it with the transform scale
this is only valid if custom_size isn't used

========================================================================

Game Freeze

after removing the 'Picked' Component from the only Sprite in the scene, the game froze
setup was still completed, but it didn't run the controls-system once; suggests to me it freezes because of the query
-> must be one of the two Queries for Pickables/Picked

approach: add second Pickable to the scene an see what happens; first one keep the 'Picked' component for now
result: game freezes without ever running control system -> suggests the Query for Pickables is the problem
WRONG: I added the 'Picked' component to the second rune by accident... but then why did the game freeze...?

approach: correctly this time: first Rune gets Picked-comp, second one doesn't
result: game runs as expected

approach: remove Picked-Comp from first rune
result: setup completes, scene is rendered, but controls system fails entirely
solution from description of Single-struct:

"This SystemParam fails validation if zero or more than one matching entity exists.
This will cause the system to be skipped, according to the rules laid out in SystemParamValidationError."
-> explains why this doesn't run at all with 0 or 2 Picked entities :D
>> need to use: Option<Single<...>>

=====

Follow up question: how to actually use / unwrap/ access the Option<Single<..>>?
Answer: unrwap (and hope for the best ;) )


====


FixedUpdate vs Update

moved the function that places the currently Picked object on the mouse cursor to a separate system which runs on Update, not FixedUpdate
-> feels much smoother

+++

Single-Queries can be used as conditions for functions

by adding a Single Query like this:
Single<Entity, (With<ComponentA>, Without<ComponentB>)>

effectively, this means that the function containing this query will only run if there is an entity that holds A-and-not-B

now I can just create an entity that is used as a "meta-entity", for example a player entity that holds no visible game content

I used it to react to press/release events only if the player was marked with "PlayerAttemptsPress"/"PlayerAttemptsRelease"

+++

sprites

Sprites can be changed in size by using the custom_size field
their size can also be changed by using the scale in a transformn component (within the same entity, the sprite itself doesn't have a transform inside)
NOTE: when using both custom_size AND scale, they add up; so the end result-size is custom_size * scale

the z-component of the transform is used by the sprite as render-layer; 0 is the furthest in the back, higher numbers = further to the front
NOTE: when scaling the sprite, the z-component of the scale has no effect (aka does not change a sprites render layer)

+++

sprites in child entities

when en entity with has a child entity and that child entity holds a sprite, the tranforms of parent & child are added, which affects the render layer!

+++

Queries can block each other

Queries MUST be ensured to be disjoint if they access the same componnet (i.e., have one query for transforms of entities with component A, and another for transforms of entity with Component B)
-> use With<A> for the first, (With<B>, Without<A>) for the secound

+++

Building for web

for reference: https://bevy-cheatbook.github.io/platforms/wasm.html

(I have done practically nothing with web in my life so please don't judge me for writing down basic stuff)
-'building for web' means targeting WASM (WebAssembly)
-the resulting file(? files?) can then be embedded into a website
--> you must either host a site yourself and embed the game into that OR use a provider; itch.io makes this very easy
--> the itch.io page can also be used as submission to a Jam

in case the reference ceases to exist at some point, here is the gist:
-install wasm target by running in command line: 'rustup target install wasm32-unknown-unknown'
-install wasm-server-runner: 'cargo install wasm-server-runner'
!!!! compilation failed !!!: "Missing dependency: cmake
++++
--> I'm assuming this would need cmake added to environment variables? but I don't know for sure -> I'll try the cli-alpha...:
https://github.com/TheBevyFlock/bevy_cli

-install it to cargo (not a crate yet, so need to install it from github):
'cargo install --git https://github.com/TheBevyFlock/bevy_cli --tag cli-v0.1.0-alpha.1 --locked bevy_cli'

'bevy lint' to check code quality

'bevy run web --open' to run the app in browser 
-> worked!

--> how do I compile... whatever I need to upload to my itch.io page?
-> 'bevy build web --bundle'; resulting bundle should be in 'target/bevy_web'

from thebvy-cli documentation:
"
Note:
The arguments you know from cargo (like --release) must be placed before the web subcommand, while the web-specific options (like --open) must be placed afterwards, e.g.
"

=============

Loading assets & handling Async Loading

Problem: calculating collider size based on sprite dimensions failed because spirte info is not availabel immediately
Appraoch: run while loop while waiting for asset to be loaded
Failed: assets was never loaded, loop was inifinite, even with 1-second thread sleep

new resource:
https://deepwiki.com/bevyengine/bevy/4.1-asset-loading-and-handles

final solution:
-add a component that contains all relevant information for the collider that wil be created in scene-setup ("AddCollider")
-add system to Last-schedule that queries all entites with Sprites & AddCollider components
-for each found entity, check if the Sprite has been loaded and if it has, create a collider based on the information contained in AddCollider
--remove the AddCollider-Component when this happens, it should only be used this once

benefit from this approach: it is fairly generic; I can just expand the information contain in AddCollider over time and use it for any sprite-asset
-> this could be moved to a Plugin later? is it possible to build a Plugin on top of a plugin? (I'm thinking a Plugin that automatically adds Physics Colliders to Sprites using this system, which would make it much easier to build 2D-sprite-based games with physics... -> I'll check this out later)

Important note: I cannot just assign the transformn of the ball-firing-thingy to the blue-ball, because that also effects the z-component of the translation, which is the render-layer - and for some reason, when they both end up on the same render layer, the firing-thingy always won (not sure why, maybe because it's created later/earlier...?)
-> solution was to just copy over the x/y-components into the translation of the blue_ball and leave the z untouched

====

Debug rendering

rendering the colliders for debugging was easy:
'.add_plugins(PhysicsDebugPlugin::default())' did the trick

===

Collider size

the size given to the circle must be in pixels, since it matches perfectly with my calculated sprite sizes
also, this line:
'.add_plugins(PhysicsPlugins::default().with_length_unit(1.0))' has no effect at all on collider sizes (about which I wasn't sure originally)

===

Moving kinematic bodies

Add a kinematic RigidBody - apparently - also adds A linearVevlocity component
This component can be queried and modified in a system, but what I'm trying to do is different: I want to create A RigidBody with an initial LinearVelocity...
-> how to do that?
-RigidBody Component is just an enum! -> can't do it there

-kinematic character example from avian uses queries for this...

-approach: add RigidBody on object creation, and query the linear velocity in the collision handling to overwrite it
-> Worked!

-Note: LinearVelocity has no named member, so to access it, it goes like this:
PSEUDO CODE 
linear_velocity.0 = <Vec2 in avian2d>

===